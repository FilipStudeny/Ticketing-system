@page "/register"
@using TicketingSystem.Models
@using TicketingSystem.Data
@using System.Text
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<h3>Register</h3>

<EditForm Model="@newUser" OnValidSubmit="RegisterTechnician">
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="newUser.Email" class="form-control" />
        <ValidationMessage For="@(() => newUser.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="newUser.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => newUser.Password)" />
    </div>

    <div class="mb-3">
        <div class="row">
            <div class="form-group col-md-6">
                <label for="firstname">First Name</label>
                <InputText id="firstname" @bind-Value="newUser.Firstname" class="form-control" />
                <ValidationMessage For="@(() => newUser.Firstname)" />
            </div>

            <div class="form-group col-md-6">
                <label for="lastname">Last Name</label>
                <InputText id="lastname" @bind-Value="newUser.Lastname" class="form-control" />
                <ValidationMessage For="@(() => newUser.Lastname)" />
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary" disabled="@(!IsFormValid())">Register</button>
</EditForm>

@code {
    private User newUser = new User();
    private static readonly Random random = new Random();

    [Inject]
    private DataContext dataContext { get; set; }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(newUser.Email) &&
               !string.IsNullOrWhiteSpace(newUser.Password) &&
               !string.IsNullOrWhiteSpace(newUser.Firstname) &&
               !string.IsNullOrWhiteSpace(newUser.Lastname);
    }

    private async Task RegisterTechnician()
    {
        newUser.UserRole = "Technician";
    
        // Generate a unique ID
        newUser.ID = await GenerateUniqueUserIdAsync(10);

        dataContext.Users.Add(newUser); // Assuming "Users" is the DbSet for users
        await dataContext.SaveChangesAsync();

        NavigationManager.NavigateTo("/login");
    }
    
    private async Task<bool> IsUserIdUniqueAsync(string userId)
    {
        bool isUnique = !await dataContext.Users.AnyAsync(u => u.ID == userId);
        return isUnique;
    }
    
    private async Task<string> GenerateUniqueUserIdAsync(int length)
    {
        const string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder stringBuilder = new StringBuilder(length);
        Random random = new Random();

        while (true)
        {
            for (int i = 0; i < length; i++)
            {
                int index = random.Next(characters.Length);
                stringBuilder.Append(characters[index]);
            }

            string generatedId = stringBuilder.ToString();

            bool isIdUnique = await IsUserIdUniqueAsync(generatedId);

            if (isIdUnique)
            {
                return generatedId;
            }
            else
            {
                stringBuilder.Clear();
            }
        }
    }
}
